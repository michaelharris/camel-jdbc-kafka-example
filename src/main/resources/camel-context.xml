<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

  <!--
  Embedded in-memory database setup.
  -->
  <jdbc:embedded-database id="dataSource" type="DERBY">
    <jdbc:script location="classpath:create-derby.sql"/>
  </jdbc:embedded-database>

  <!--
  Sample Data and Record Processor beans
  -->
  <bean id="sampleGenerator" class="org.apache.camel.component.dataset.SimpleDataSet">
    <property name="size" value="10"/>
    <property name="defaultHeaders">
      <map>
        <entry key="insertMsg" value="Hello"/>
      </map>
    </property>
  </bean>
  <bean id="recordProcessor" class="net.mikeharris.example.etl.RecordProcessor">
  </bean>

  <!--
  Camel route setup
  -->
  <camel:camelContext xmlns="http://camel.apache.org/schema/spring">
   

    <!-- The query-update-route-part1/2 routes are used to query database and process it and then
    update the STATUS as marker flag so not to re-process again. -->
    <route id="query-update-route-part1">
      <from uri="timer://timer1?period=500s"/>
      <setBody>
        <constant>
          SELECT ENTITY_ID, LABEL FROM CAMEL_TEST ORDER BY ID
        </constant>
      </setBody>
      <to uri="jdbc:dataSource"/>
<!--       <split> -->
<!--         <simple>${body}</simple> -->
<!--         <to uri="bean:recordProcessor"/> -->
        <to uri="activemq:queue:inbox"/>
<!--       </split> -->
    </route>
    
        <!--  
		    <route id="query-update-route-part2">
		      <from uri="direct:updateDone"/>
		      <setHeader headerName="camelTestId">
		        <simple>${body['ID']}</simple>
		      </setHeader>
		      <setBody>
		        <constant>
		          UPDATE CAMEL_TEST SET STATUS='DONE' WHERE ID=:?camelTestId
		        </constant>
		      </setBody>
		      <to uri="jdbc:dataSource?useHeadersAsParameters=true"/>
		      <setBody>
		        <simple>Record ID=${headers.camelTestId} has been marked as 'DONE'</simple>
		      </setBody>
		      <to uri="log:updateDone"/>
		    </route>
		
		  -->
  
    </camel:camelContext>
  
  <!-- create a Camel ActiveMQ component to use, using the Spring bean style --> 
    <!-- we use the vm protocol to communicate intra-jvm which is much faster than tcp --> 
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent"> 
        <!-- vm://myBroker is the vm protocol, and myBroker is the broker name --> 
        <property name="brokerURL" value="vm://myBroker?create=false&amp;waitForStart=5000"/> 
    </bean> 
    
       <!-- Here we define Camel, notice the namespace it uses --> 
      
  <camelContext xmlns="http://camel.apache.org/schema/spring"> 
      
        <!-- 
      <route> 
          <from uri="timer:foo?period=1s"/> 
          <transform> 
              <simple>Message at ${date:now:yyyy-MM-dd HH:mm:ss}</simple> 
          </transform> 
          <to uri="activemq:queue:inbox"/> 
      </route> 
    	-->
    	
      <!-- Camel route to move messages from the ActiveMQ inbox to its outbox queue --> 
      <route> 
          <from uri="activemq:queue:inbox"/> 
          <log message="Routing message from inbox to outbox queue with data ${body}"/> 
          <to uri="activemq:queue:outbox"/> 
      </route> 
      
    <route>
    
    <from uri="activemq:queue:outbox" />
    <log message="Routing  TO ES data ${body}"/> 
    	<to uri="elasticsearch://elasticsearch?operation=INDEX&amp;indexName=cameltest&amp;indexType=entmap"/>
	</route>
  
  </camelContext> 


  

</beans>
